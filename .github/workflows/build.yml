name: Build

on:
  push:
    branches: [ main, dev ]
    tags: [ 'v*' ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/**'
      - 'LICENSE'
  pull_request:
    branches: [ main, dev ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/**'
      - 'LICENSE'

jobs:
  check:
    runs-on: ubuntu-latest
    if: |
      !startsWith(github.event.head_commit.message, 'docs:') &&
      !startsWith(github.event.head_commit.message, 'ci:') &&
      !startsWith(github.event.head_commit.message, 'chore:') &&
      !startsWith(github.event.head_commit.message, 'style:') &&
      !contains(github.event.head_commit.message, 'skip ci')
    outputs:
      version: ${{ steps.version.outputs.version }}
      commit: ${{ steps.version.outputs.commit }}
      build_time: ${{ steps.version.outputs.build_time }}
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整的 git 历史用于版本标签

      - name: Get version info
        id: version
        run: |
          # 获取版本号（如果有标签就用标签，否则用 commit id）
          VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev")
          COMMIT=$(git rev-parse --short HEAD)
          BUILD_TIME=$(date -u --iso-8601=ns)
          
          # 构建版本后缀
          if [[ "${VERSION}" == "dev" ]]; then
            VERSION_SUFFIX="dev-${COMMIT}"
          else
            VERSION_SUFFIX="${VERSION}-${COMMIT}"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "commit=${COMMIT}" >> $GITHUB_OUTPUT
          echo "build_time=${BUILD_TIME}" >> $GITHUB_OUTPUT
          
          echo "Version: ${VERSION}"
          echo "Commit: ${COMMIT}"
          echo "Build Time: ${BUILD_TIME}"

  build:
    needs: check
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [amd64, arm64]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: darwin
        exclude:
          - os: windows-latest
            arch: arm64  # Windows 暂不构建 arm64 版本

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Install dependencies
      run: go mod download

    - name: Set binary name
      shell: bash
      run: |
        BASE_NAME="sql-runner-${{ needs.check.outputs.version}}-${{ matrix.platform }}-${{ matrix.arch }}"
        if [[ "${{ matrix.platform }}" == "windows" ]]; then
          echo "BINARY_NAME=${BASE_NAME}.exe" >> $GITHUB_ENV
        else
          echo "BINARY_NAME=${BASE_NAME}" >> $GITHUB_ENV
        fi

    - name: Set CGO environment (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          echo "CGO_ENABLED=1" >> $GITHUB_ENV
        else
          echo "CGO_ENABLED=1" >> $GITHUB_ENV
        fi

    - name: Set CGO environment (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        echo "CGO_ENABLED=1" >> $GITHUB_ENV

    - name: Set CGO environment (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        echo "CGO_ENABLED=1" >> $GITHUB_ENV

    - name: Build
      shell: bash
      run: |
        LDFLAGS="-X main.Version=${{ needs.check.outputs.version }} \
                 -X main.Commit=${{ needs.check.outputs.commit }} \
                 -X main.BuildTime=${{ needs.check.outputs.build_time }} \
                 -s -w"
        go build -v -o "${BINARY_NAME}" -ldflags="${LDFLAGS}" ./cmd/sql-runner/

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.BINARY_NAME }}
        path: ${{ env.BINARY_NAME }}
        compression-level: 9

  build-rocky8:
    needs: check
    name: Build Rocky 8
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [ amd64, arm64 ]
        include:
          - arch: amd64
            container: rockylinux:8
            go_arch: amd64
          - arch: arm64
            container: rockylinux:8
            go_arch: arm64
    container: ${{ matrix.container }}

    steps:
    - name: Install dependencies
      run: |
        yum install -y gcc gcc-c++ git make curl
        curl -L https://go.dev/dl/go1.22.9.linux-amd64.tar.gz | tar -C /usr/local -xzf -
        export PATH=$PATH:/usr/local/go/bin

    - uses: actions/checkout@v3

    - name: Build
      shell: bash
      run: |
        rm -rf .git
        export PATH=$PATH:/usr/local/go/bin
        export CGO_ENABLED=1
        export CC=gcc
        go mod download
        
        BINARY_NAME="sql-runner-${{ needs.check.outputs.version}}-rocky8-${{ matrix.arch }}"
        
        LDFLAGS="-X main.Version=${{ needs.check.outputs.version }} \
                 -X main.Commit=${{ needs.check.outputs.commit }} \
                 -X main.BuildTime=${{ needs.check.outputs.build_time }} \
                 -s -w"
        go build -v -o "${BINARY_NAME}" -ldflags="${LDFLAGS}" ./cmd/sql-runner/

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: sql-runner-${{ needs.check.outputs.version}}-rocky8-${{ matrix.arch }}
        path: sql-runner-${{ needs.check.outputs.version}}-rocky8-${{ matrix.arch }}
        compression-level: 9

  release:
    needs: [build, build-rocky8]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Generate checksums
      run: |
        for file in sql-runner*/*; do
          sha256sum "$file" >> checksums.txt
        done

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          sql-runner*/*
          checksums.txt
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
        generate_release_notes: true
