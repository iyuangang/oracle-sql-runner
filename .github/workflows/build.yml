name: Build

on:
  push:
    branches: ["**"]
    tags: ["v*"]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/**'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      tag_version:
        description: "Tag Version (e.g., v1.2.3)"
        required: true
        type: string

# 并发控制
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-build
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  GO_VERSION: '1.22'
  CGO_ENABLED: 1

jobs:
  check:
    runs-on: ubuntu-latest
    if: |
      !startsWith(github.event.head_commit.message, 'docs:') &&
      !startsWith(github.event.head_commit.message, 'ci:') &&
      !startsWith(github.event.head_commit.message, 'chore:') &&
      !startsWith(github.event.head_commit.message, 'style:') &&
      !contains(github.event.head_commit.message, 'skip ci')
    outputs:
      version: ${{ steps.version.outputs.version }}
      commit: ${{ steps.version.outputs.commit }}
      build_time: ${{ steps.version.outputs.build_time }}
      version_suffix: ${{ steps.version.outputs.version_suffix }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version info
        id: version
        run: |
          VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev")
          COMMIT=$(git rev-parse --short HEAD)
          BUILD_TIME=$(date -u --iso-8601=ns)
          VERSION_SUFFIX="${VERSION}"
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "commit=${COMMIT}" >> $GITHUB_OUTPUT
          echo "build_time=${BUILD_TIME}" >> $GITHUB_OUTPUT
          echo "version_suffix=${VERSION_SUFFIX}" >> $GITHUB_OUTPUT
          
          echo "Version: ${VERSION}"
          echo "Commit: ${COMMIT}"
          echo "Build Time: ${BUILD_TIME}"
          echo "Version Suffix: ${VERSION_SUFFIX}"

  # 删除原有的 test job，替换为等待 test workflow 完成
  wait-tests:
    name: Wait for tests
    needs: check
    runs-on: ubuntu-latest
    steps:
      - name: Wait for tests
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.ref }}
          running-workflow-name: 'Wait for tests'
          repo-token: ${{ secrets.ACTION_GITHUB_TOKEN }}
          wait-interval: 10

  build:
    needs: [check, wait-tests]
    strategy:
      fail-fast: false
      matrix:
        include:
          - {os: ubuntu-latest, platform: linux, arch: amd64}
          - {os: ubuntu-latest, platform: linux, arch: arm64}
          - {os: windows-latest, platform: windows, arch: amd64}
          - {os: macos-latest, platform: darwin, arch: amd64}
          - {os: macos-latest, platform: darwin, arch: arm64}
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Restore Go modules
        id: cache-primes
        uses: actions/cache/restore@v4
        with:
          path: |
            if [ "${{ runner.os }}" = "Windows" ]; then
              ~\AppData\Local\go-build
            elif [ "${{ runner.os }}" = "Darwin" ]; then
              ~/Library/Caches/go-build
            else
              ~/.cache/go-build
            fi
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ matrix.arch }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-go-

      - name: Install dependencies
        if: steps.cache-primes.outputs.cache-hit != 'true'
        run: |
          go mod download
          go mod verify

      - name: Set up cross-compilation
        if: matrix.arch == 'arm64' && matrix.platform != 'darwin'
        run: |
          if [ "${{ matrix.platform }}" = "linux" ]; then
            sudo apt-get update
            sudo apt-get install -y gcc-aarch64-linux-gnu
            echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Build (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        env:
          GOOS: ${{ matrix.platform }}
          GOARCH: ${{ matrix.arch }}
        run: |
          $BinaryName = "sql-runner-${{ needs.check.outputs.version_suffix }}-${{ matrix.platform }}-${{ matrix.arch }}.exe"
          $LdFlags = "-X main.Version=${{ needs.check.outputs.version }} " + `
                    "-X main.Commit=${{ needs.check.outputs.commit }} " + `
                    "-X main.BuildTime=${{ needs.check.outputs.build_time }} " + `
                    "-s -w"
          
          go build -v -o $BinaryName -ldflags="$LdFlags" ./cmd/sql-runner/

      - name: Build (Unix)
        if: matrix.platform != 'windows'
        shell: bash
        env:
          GOOS: ${{ matrix.platform }}
          GOARCH: ${{ matrix.arch }}
        run: |
          BINARY_NAME="sql-runner-${{ needs.check.outputs.version_suffix }}-${{ matrix.platform }}-${{ matrix.arch }}"
          
          LDFLAGS="-X main.Version=${{ needs.check.outputs.version }} \
                   -X main.Commit=${{ needs.check.outputs.commit }} \
                   -X main.BuildTime=${{ needs.check.outputs.build_time }} \
                   -s -w"
          
          go build -v -o "${BINARY_NAME}" -ldflags="${LDFLAGS}" ./cmd/sql-runner/

      - name: Cache Go modules
        uses: actions/cache/save@v4
        with:
          path: |
            if [ "${{ runner.os }}" = "Windows" ]; then
              ~\AppData\Local\go-build
            elif [ "${{ runner.os }}" = "Darwin" ]; then
              ~/Library/Caches/go-build
            else
              ~/.cache/go-build
            fi
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ matrix.arch }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-go-

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sql-runner-${{ needs.check.outputs.version_suffix }}-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            sql-runner-*
          compression-level: 9


  build-rocky8:
    needs: [check, wait-tests]
    runs-on: ubuntu-latest
    
    container: 
      image: rockylinux:8

    steps:
      - name: Install dependencies
        run: |
          dnf install -y gcc gcc-c++ git make curl

      - uses: actions/checkout@v4

      - name: Restore Go modules
        id: cache-primes
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            /usr/local/go/
          key: rocky8-amd64-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            rocky8-amd64-go-

      - name: Install Go
        if: steps.cache-primes.outputs.cache-hit != 'true'
        run: |
          if [ ! -d /usr/local/go ]; then
            curl -L https://go.dev/dl/go1.22.9.linux-amd64.tar.gz | tar -C /usr/local -xzf -
          fi

      - name: Build
        run: |
          export PATH=/usr/local/go/bin:$PATH
          export CGO_ENABLED=1
          rm -rf .git

          BINARY_NAME="sql-runner-${{ needs.check.outputs.version_suffix }}-rocky8-amd64"
          
          LDFLAGS="-X main.Version=${{ needs.check.outputs.version }} \
                   -X main.Commit=${{ needs.check.outputs.commit }} \
                   -X main.BuildTime=${{ needs.check.outputs.build_time }} \
                   -s -w"
          
          go build -v -o "${BINARY_NAME}" -ldflags="${LDFLAGS}" ./cmd/sql-runner/

      - name: Cache Go modules
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            /usr/local/go/
          key: rocky8-amd64-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            rocky8-amd64-go-

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sql-runner-${{ needs.check.outputs.version_suffix }}-rocky8-amd64
          path: |
            sql-runner-*
          compression-level: 9


  changelog:
    needs: check
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag' || github.event.inputs.tag_version != ''
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: mkdir changelog
        run: |
          mkdir -p changelog
      
      - name: Generate changelog
        env:
          GITHUB_TOKEN: ${{ secrets.ACTION_GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.check.outputs.version }}"
          CURRENT_TAG="${VERSION}"
          PREVIOUS_TAG=$(git describe --abbrev=0 --tags `git rev-list --tags --skip=1 --max-count=1` 2>/dev/null || echo "")
          CURRENT_DATE=$(date +'%Y-%m-%d')
          REPO="${{ github.repository }}"
          
          declare -A AUTHOR_MAP
          while IFS= read -r line; do
            FULL_HASH=$(echo "$line" | cut -d' ' -f1)
            SHORT_HASH=$(echo "$line" | cut -d' ' -f2)
            AUTHOR=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
                         -H "Accept: application/vnd.github+json" \
                         -H "X-GitHub-Api-Version: 2022-11-28" \
                         "https://api.github.com/repos/${REPO}/commits/${FULL_HASH}" | \
                    jq -r '.author.login // empty')
            if [ ! -z "$AUTHOR" ]; then
              AUTHOR_MAP[$SHORT_HASH]="@$AUTHOR"
            fi
          done < <(git log ${PREVIOUS_TAG}..HEAD --format="%H %h")
          
          {
            echo "# Changelog"
            echo
            echo "## ${CURRENT_TAG} (${CURRENT_DATE})"
            echo
            echo "### Major Updates"
            echo
            
            echo "#### ⭐ New Features"
            git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --reverse | grep -E "^- feat" | \
              sed -E 's/^- feat(\([^)]+\))?:/-/' | while read -r line; do
                HASH=$(echo "$line" | grep -o '([a-f0-9]\{7\})' | tr -d '()')
                AUTHOR="${AUTHOR_MAP[$HASH]}"
                echo "$line ${AUTHOR}"
              done || echo "- None"
            echo
            
            echo "#### ⚡️ Optimizations"
            git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --reverse | grep -E "^- (perf|refactor)" | \
              sed -E 's/^- (perf|refactor)(\([^)]+\))?:/-/' | while read -r line; do
                HASH=$(echo "$line" | grep -o '([a-f0-9]\{7\})' | tr -d '()')
                AUTHOR="${AUTHOR_MAP[$HASH]}"
                echo "$line ${AUTHOR}"
              done || echo "- None"
            echo
            
            echo "#### 🐞 Bug Fixes"
            git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --reverse | grep -E "^- fix" | \
              sed -E 's/^- fix(\([^)]+\))?:/-/' | while read -r line; do
                HASH=$(echo "$line" | grep -o '([a-f0-9]\{7\})' | tr -d '()')
                AUTHOR="${AUTHOR_MAP[$HASH]}"
                echo "$line ${AUTHOR}"
              done || echo "- None"
            echo
            
            echo "#### 📚 Documentation Updates"
            git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --reverse | grep -E "^- docs" | \
              sed -E 's/^- docs(\([^)]+\))?:/-/' | while read -r line; do
                HASH=$(echo "$line" | grep -o '([a-f0-9]\{7\})' | tr -d '()')
                AUTHOR="${AUTHOR_MAP[$HASH]}"
                echo "$line ${AUTHOR}"
              done || echo "- None"
            echo
            
            echo "#### ⬆️ Dependency Updates"
            git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --reverse | grep -E "^- (build|deps)" | \
              sed -E 's/^- (build|deps)(\([^)]+\))?:/-/' | while read -r line; do
                HASH=$(echo "$line" | grep -o '([a-f0-9]\{7\})' | tr -d '()')
                AUTHOR="${AUTHOR_MAP[$HASH]}"
                echo "$line ${AUTHOR}"
              done || echo "- None"
            echo
            
            echo "#### 🔨 Other Changes"
            git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --reverse | \
              grep -vE "^- (feat|fix|docs|refactor|perf|build|deps):" | while read -r line; do
                HASH=$(echo "$line" | grep -o '([a-f0-9]\{7\})' | tr -d '()')
                AUTHOR="${AUTHOR_MAP[$HASH]}"
                echo "$line ${AUTHOR}"
              done || echo "- None"
            echo
            
            echo "### 👥 Contributors"
            printf '%s\n' "${AUTHOR_MAP[@]}" | sort -u | tr '\n' ' '
            echo
            echo
            
            echo "[Full Changelog](https://github.com/${REPO}/compare/${PREVIOUS_TAG}...${CURRENT_TAG})"
            
          } > changelog/CHANGELOG.md
          
          sed -i '/- None/d' changelog/CHANGELOG.md
          sed -i '/#### .*/{ N; /####.*\n$/d }' changelog/CHANGELOG.md
          
          cat changelog/CHANGELOG.md
      
      - name: Upload changelog
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: changelog/CHANGELOG.md

  release:
    needs: [check, build, build-rocky8, changelog]
    if: github.ref_type == 'tag' || github.event.inputs.tag_version != ''
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      id-token: write
      attestations: write
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
      
      - name: Prepare release assets
        run: |
          mkdir -p release
          cp -r sql-runner-*/* release/
          for file in release/*; do
            sha256sum "$file" > "$file.sha256"
          done
      
      - name: Generate provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: release/*
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ needs.check.outputs.version }}
          body_path: changelog/CHANGELOG.md
          files: release/*
          draft: false
          prerelease: ${{ contains(needs.check.outputs.version, 'beta') || contains(needs.check.outputs.version, 'alpha') }}
