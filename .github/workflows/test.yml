name: Test

on:
  push:
    branches: ["**"]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'
  pull_request:
    branches: ["**"]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'

# 并发控制
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-test
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        go-version: ['1.21', '1.22', '1.23']
        os: [ubuntu-24.04]
    
    runs-on: ${{ matrix.os }}
    
    services:
      oracle:
        # Oracle 服务仅在 Linux 环境下运行
        image: gvenzl/oracle-xe:latest
        env:
          ORACLE_PASSWORD: oracle
          APP_USER: test
          APP_USER_PASSWORD: test123
        ports:
          - 1521:1521
        options: >-
          --health-cmd healthcheck.sh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      # Linux 特定步骤
      - name: Restore Oracle Instant Client (Linux)
        if: matrix.os == 'ubuntu-24.04'
        id: cache-oracle-linux
        uses: actions/cache/restore@v4
        with:
          path: /opt/oracle/instantclient_23_6
          key: ubuntu-24.04-oracle-instantclient-${{ hashFiles('**/go.sum') }}
          restore-keys: ubuntu-24.04-oracle-instantclient-
      
      - name: Install Oracle Instant Client (Linux)
        if: matrix.os == 'ubuntu-24.04' && steps.cache-oracle-linux.outputs.cache-hit != 'true'
        run: |
          wget https://download.oracle.com/otn_software/linux/instantclient/2360000/instantclient-basic-linux.x64-23.6.0.24.10.zip
          sudo mkdir -p /opt/oracle
          sudo unzip instantclient-basic-linux.x64-23.6.0.24.10.zip -d /opt/oracle
          sudo mkdir -p /opt/oracle/instantclient_23_6/network/admin
          echo "XE =
            (DESCRIPTION =
            (ADDRESS = (PROTOCOL = TCP)(HOST = localhost)(PORT = 1521))
            (CONNECT_DATA =
              (SERVER = DEDICATED)
              (SERVICE_NAME = FREEPDB1)
            )
          )" | sudo tee /opt/oracle/instantclient_23_6/network/admin/tnsnames.ora
          
      - name: Configure Oracle Instant Client (Linux)
        run: |
          # sudo apt-get update
          # sudo apt-get install -y libaio1t64
          sudo ln -s /usr/lib/x86_64-linux-gnu/libaio.so.1t64 /usr/lib/x86_64-linux-gnu/libaio.so.1
          
          echo "/opt/oracle/instantclient_23_6" | sudo tee /etc/ld.so.conf.d/oracle-instantclient.conf
          sudo ldconfig
          
          echo "LD_LIBRARY_PATH=/opt/oracle/instantclient_23_6:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "PATH=/opt/oracle/instantclient_23_6:$PATH" >> $GITHUB_ENV
      
      - name: Cache Oracle Instant Client (Linux)
        if: matrix.os == 'ubuntu-24.04' && steps.cache-oracle-linux.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: /opt/oracle/instantclient_23_6
          key: ubuntu-24.04-oracle-instantclient-${{ hashFiles('**/go.sum') }}
          restore-keys: ubuntu-24.04-oracle-instantclient-

      - name: Create test config
        shell: bash
        run: |
          cat > config.json << EOF
          {
            "databases": {
              "test": {
                "name": "测试库",
                "user": "system",
                "password": "oracle",
                "host": "localhost",
                "port": 1521,
                "service": "FREEPDB1"
              }
            },
            "max_retries": 3,
            "max_concurrent": 1,
            "batch_size": 1000,
            "timeout": 30,
            "log_level": "debug",
            "log_file": "logs/sql-runner.log"
          }
          EOF

      # 运行测试
      - name: Run unit tests
        run: go test -v -race -coverprofile=coverage.unit.txt ./cmd/... ./pkg/... ./internal/...

      # 仅在 Linux 环境下运行集成测试
      - name: Run integration tests
        if: matrix.os == 'ubuntu-24.04'
        run: |
          source $GITHUB_ENV
          go test -v -race -coverprofile=coverage.integration.txt ./test/integration/...

      # 仅在 Linux 环境下运行全量测试
      - name: Run full tests
        if: matrix.os == 'ubuntu-24.04'
        run: |
          source $GITHUB_ENV
          go test -v -race -coverprofile=coverage.full.txt ./...

      # 合并覆盖率报告（仅 Linux）
      - name: Combine coverage reports
        if: matrix.os == 'ubuntu-24.04'
        run: |
          echo "mode: atomic" > coverage.txt
          tail -n +2 coverage.unit.txt >> coverage.txt
          if [ -f coverage.integration.txt ]; then
            tail -n +2 coverage.integration.txt >> coverage.txt
          fi
          if [ -f coverage.full.txt ]; then
            tail -n +2 coverage.full.txt >> coverage.txt
          fi

      # 上传覆盖率报告（仅 Linux）
      - name: Upload test coverage
        if: matrix.os == 'ubuntu-24.04'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.txt
          flags: ${{ matrix.os }}-go${{ matrix.go-version }}

  # 测试结果汇总
  report-results:
    needs: test
    runs-on: ubuntu-24.04
    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test.result }}" = "success" ]; then
            echo "All tests passed successfully!"
            exit 0
          else
            echo "Some tests failed!"
            exit 1
          fi
